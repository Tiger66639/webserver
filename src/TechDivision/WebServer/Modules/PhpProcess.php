<?php
/**
 * \TechDivision\WebServer\Modules\PhpProcess
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 *
 * PHP version 5
 *
 * @category   Webserver
 * @package    TechDivision_WebServer
 * @subpackage Modules
 * @author     Johann Zelger <jz@techdivision.com>
 * @copyright  2014 TechDivision GmbH <info@techdivision.com>
 * @license    http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)
 * @link       https://github.com/techdivision/TechDivision_WebServer
 */

namespace TechDivision\WebServer\Modules;

/**
 * Class PhpProcess
 *
 * @category   Webserver
 * @package    TechDivision_WebServer
 * @subpackage Modules
 * @author     Johann Zelger <jz@techdivision.com>
 * @copyright  2014 TechDivision GmbH <info@techdivision.com>
 * @license    http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)
 * @link       https://github.com/techdivision/TechDivision_WebServer
 */
class PhpProcess extends \Thread
{
    /**
     * Hold's the headers as array
     *
     * @var array
     */
    public $headers;

    /**
     * Hold's the output buffer generated by process run
     *
     * @var string
     */
    public $outputBuffer;

    /**
     * Constructs the process
     *
     * @param string                                     $scriptFilename The script filename to execute
     * @param \TechDivision\WebServer\Modules\PhpGlobals $globals        The globals instance
     */
    public function __construct($scriptFilename, PhpGlobals $globals)
    {
        $this->globals = $globals;
        $this->scriptFilename = $scriptFilename;
    }

    /**
     * Run's the process
     *
     * @return void
     */
    public function run()
    {
        // init globals to local var
        $globals = $this->globals;
        // register shutdown handler
        register_shutdown_function(array(&$this, "shutdown"));
        // start output buffering
        ob_start();
        // set globals
        $_SERVER = $globals->server;

        error_log(var_export($_SERVER, true));

        $_REQUEST = $globals->request;
        $_POST = $globals->post;
        $_GET = $globals->get;
        $_COOKIE = $globals->cookie;
        //$_FILES = $globals->files;

        // change dir to be in real php process context
        chdir(dirname($this->scriptFilename));
        // reset headers sent
        appserver_set_headers_sent(false);
        // require script filename
        require $this->scriptFilename;
    }

    /**
     * Implements shutdown logic
     *
     * @return void
     */
    public function shutdown()
    {
        // set headers set by script inclusion
        $this->headers = appserver_get_headers(true);
        // set output buffer set by script inclusion
        $this->outputBuffer = ob_get_clean();
    }

    /**
     * Return's the output buffer
     *
     * @return string
     */
    public function getOutputBuffer()
    {
        return $this->outputBuffer;
    }

    /**
     * Return's the headers array
     *
     * @return array
     */
    public function getHeaders()
    {
        return $this->headers;
    }
}
